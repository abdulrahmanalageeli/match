import { createClient } from "@supabase/supabase-js"
import OpenAI from "openai"

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.VITE_SUPABASE_ANON_KEY
)

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY })

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Only POST allowed" })
  }

  const match_id = process.env.CURRENT_MATCH_ID || "00000000-0000-0000-0000-000000000000"

  try {
    // 1. Fetch participants
    const { data: participants, error } = await supabase
      .from("participants")
      .select("assigned_number, q1, q2, q3, q4")
      .eq("match_id", match_id)

    if (error) throw error
    if (!participants || participants.length < 2) {
      return res.status(400).json({ error: "Not enough participants" })
    }

    const numbers = participants.map(p => p.assigned_number)
    const pairs = []
    const scores = {}

    // 2. Generate all unique pairs
    for (let i = 0; i < participants.length; i++) {
      for (let j = i + 1; j < participants.length; j++) {
        pairs.push([participants[i], participants[j]])
      }
    }

    // 3. GPT prompt
    const prompt = pairs.map(([a, b]) => (
      `ุงููุดุงุฑู ${a.assigned_number}:\n- ${a.q1 ?? ""}\n- ${a.q2 ?? ""}\n- ${a.q3 ?? ""}\n- ${a.q4 ?? ""}\n` +
      `ุงููุดุงุฑู ${b.assigned_number}:\n- ${b.q1 ?? ""}\n- ${b.q2 ?? ""}\n- ${b.q3 ?? ""}\n- ${b.q4 ?? ""}`
    )).join("\n\n")

const systemMsg = `
ุฃูุช ูุณุงุนุฏ ุชูุงูู ุจูู ุงููุดุงุฑููู.

ููู ุฒูุฌ ูู ุงููุดุงุฑูููุ ูููู ูุณุจุฉ ุงูุชูุงูู ูู 0 ุฅูู 100ุ ูุงุฐูุฑ ุงูุณุจุจ ุจุงุฎุชุตุงุฑ.

ูุง ุชูููู ุจูุงุกู ุนูู ุงูุชุดุงุจู ุงูุณุทุญู ููุท. ุฑููุฒ ุนูู ุงูุนูุงูู ุงูุนูููุฉ ุงูุชู ุชุคุซุฑ ุนูู ูุฌุงุญ ุงูุนูุงูุฉ.

ุงููุนุงููุฑ ุงูุฃุณุงุณูุฉ ููุชูููู:

ุฃููุงู: ุงูุงูุณุฌุงู ูุงูุงุญุชุฑุงู ุงููุชุจุงุฏู
- ุชูุงุฑุจ ูู ุงูููู ุงูุฌููุฑูุฉ ูุซู ุงูุตุฏูุ ุงูุทููุญุ ุงูุงุญุชุฑุงูุ ุญุจ ุงูุนุงุฆูุฉุ ุงูุฑูุญุงููุฉ ุฃู ุงูุงููุชุงุญ
- ุฃุณููุจ ุชูุงุตู ููุงุณุจ ูุซู ุดุฎุต ุตุฑูุญ ูุน ุดุฎุต ูุชููู
- ุงูุชูุงู ูุชุจุงุฏู ุจููุท ุงูุญูุงุฉ ูุซู ุงููุฏูุกุ ุงููุบุงูุฑุฉุ ุงูุฑูุชููุ ุฃู ุงูุญุฑูุฉ

ุซุงููุงู: ุงูุชูุงูู ุงูููุณู ูููุณ ุงูุชุดุงุจู ููุท
- ุจุนุถ ุงูุงุฎุชูุงูุงุช ุชุนุฒุฒ ุงูุนูุงูุฉ ูุซู ุงููููุฑ ูุน ุงูุนุงุทููุ ุฃู ุงูุนููู ูุน ุงูุฅุจุฏุงุนู
- ูุง ุชุฎูุท ุจูู ุงูุชูุงูู ุงูุฅูุฌุงุจู ูุงูุชูุงูุฑ ุงูุณูุจู

ุซุงูุซุงู: ุชุฌูุจ ุงููุทุงุจูุงุช ุบูุฑ ุงููุชูุงููุฉ
- ูุง ุชุฑูุน ุงูุชูููู ุฅุฐุง ูุงู ููุงู ุชุถุงุฏ ูุงุถุญ ูุซู ุดุฎุต ูุญุจ ุงูุถูุถุงุก ูุน ุดุฎุต ุญุณุงุณ ุฌุฏุงู
- ุงุฎุชูุงูุงุช ุฌููุฑูุฉ ูู ุฃุณููุจ ุงูุญูุงุฉ ุฃู ุงููุนุชูุฏุงุช ุฃู ุฃุณููุจ ุงูุชูููุฑ ุชุนุชุจุฑ ุนูุงูุฉ ุฎุทุฑ

ุฑุงุจุนุงู: ุงุณุชุฎุฏู ูุจุงุฏุฆ MBTI ูู ุงูุชูููู ุญุชู ูู ูู ูุชู ุฐูุฑ ุงูููุท ุตุฑุงุญุฉุ ุงุณุชูุชุฌ ูู ุทุฑููุฉ ุงูุชุนุจูุฑ ูุงูุณููู:
- ุงูุชูุถูู ุงูููุถู ูู ุชูุงุฑุจ I/E (ุงูุทูุงุฆู ูุน ุงูุทูุงุฆู ุฃู ุงุฌุชูุงุนู ูุน ุงุฌุชูุงุนู)
- ุงูุชูุงูู ุงูุฃูุถู ุนุงุฏุฉ ูููู ุจูู:
  - Intuition ูุน Sensing
  - Thinking ูุน Feeling
  - Judging ูุน Perceiving
- ูุซุงู: ูููุฑ ุนููุงูู ูุน ุดุฎุต ุนุงุทูู ุญุณุงุณ ูุฏ ููููุงู ุจุนุถููุง ุฃู ูุชุตุงุฏูุงู ุญุณุจ ุฃุณููุจ ุงูุชูุงุตู

ุฎุงูุณุงู: ุงุนุชูุฏ ุนูู ุฃููููุฉ ูู ุงููุฒู ุนูุฏ ุงูุชูููู:
- ุชุทุงุจู ุงูููู ูุนุชุจุฑ ุงูุฃูู (40ูช)
- ุฃุณููุจ ุงูุญูุงุฉ ูุงูุชูุงุตู ูู ุฃูููุฉ ูุชูุณุทุฉ (30ูช)
- ุงูุชูููู ุงูููุณู ูุงูุงุฎุชูุงู ุงูุฐูู ูููุฏ ุฅุฐุง ููุฌุฏ (20ูช)
- ุนูุงูู ุงูุฌุงุฐุจูุฉ ุงูุณุทุญูุฉ ุฃู ุงูุชุดุงุจู ุงูุนุงู ุชุนุชุจุฑ ุงูุฃูู ุฃูููุฉ (10ูช)

ูุจู ุฅุนุทุงุก ุงูุชููููุ ุงุณุฃู ููุณู: ูู ูููู ููุฐูู ุงูุดุฎุตูู ุงูุชุนุงูุด ุงููููู ุจุงูุณุฌุงูุ ุฃู ุฃู ุงูุงุฎุชูุงูุงุช ุณุชุณุจุจ ุชูุชุฑุงู ูุณุชูุฑุงูุ

ูู ุฐููุงู ูู ุงุณุชูุชุงุฌ ุงูุดุฎุตูุฉ ุญุชู ุฅู ูู ุชูุฐูุฑ ุจูุถูุญ. ุฃุญูุงูุงู ูุณุชุฎุฏู ุงููุงุณ ุงูุชูุงุถุน ูุฅุฎูุงุก ุงูููุฉุ ุฃู ุงูููุงูุฉ ูุชุบุทูุฉ ุงูุญุณุงุณูุงุช.

ุฃุฑุฌุน ุงููุชุงุฆุฌ ููุท ุจุตูุบุฉ JSON Array ุจูุฐุง ุงูุดูู:

[
  { "a": 5, "b": 6, "score": 74, "reason": "ููุงููุง ููุถู ุงูุนุฒูุฉ ูุงูุชุฃูู" },
  { "a": 1, "b": 2, "score": 88, "reason": "ูุชุดุงุฑูุงู ูู ุงูููู ูุงูุงูุชูุงูุงุช" }
]

ุจุฏูู ุฃู ูุต ุฅุถุงูู ุฎุงุฑุฌ JSON.
`.trim()
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        { role: "system", content: systemMsg },
        { role: "user", content: prompt }
      ],
      temperature: 0.3
    })

    // 4. Parse GPT JSON
    let gptMatches = []
    try {
      let raw = response.choices?.[0]?.message?.content?.trim()
      if (raw.startsWith("```")) {
        raw = raw.replace(/^```[a-z]*\s*/i, "").replace(/```$/, "").trim()
      }
      gptMatches = JSON.parse(raw)
    } catch (e) {
      console.error("โ Failed to parse GPT JSON:", e)
      return res.status(500).json({ error: "GPT response was not valid JSON." })
    }

    for (const { a, b, score, reason } of gptMatches) {
      if (
        typeof a !== "number" || typeof b !== "number" ||
        typeof score !== "number" || typeof reason !== "string"
      ) continue
      scores[`${a}-${b}`] = { score, reason: reason.trim() }
    }

    // 5. Build full sorted match list
    const allPairs = []
    for (let i = 0; i < numbers.length; i++) {
      for (let j = i + 1; j < numbers.length; j++) {
        const key1 = `${numbers[i]}-${numbers[j]}`
        const key2 = `${numbers[j]}-${numbers[i]}`
        const entry = scores[key1] || scores[key2]
        if (entry && entry.score > 0) {
          allPairs.push({
            a: numbers[i],
            b: numbers[j],
            score: entry.score,
            reason: entry.reason
          })
        }
      }
    }

    allPairs.sort((p1, p2) => p2.score - p1.score)

    // 6. Assign matches per round
    const matches = []
    const alreadyMatched = new Set() // a-b key
    const matchCount = {} // participant: count

    for (let round = 1; round <= 4; round++) {
      const roundUsed = new Set()
      for (const pair of allPairs) {
        const { a, b, score, reason } = pair
        const key = [Math.min(a, b), Math.max(a, b)].join("-")

        matchCount[a] = matchCount[a] || 0
        matchCount[b] = matchCount[b] || 0

        if (
          matchCount[a] >= round || matchCount[b] >= round ||
          alreadyMatched.has(key) ||
          roundUsed.has(a) || roundUsed.has(b)
        ) continue

        matches.push({
          participant_a_number: a,
          participant_b_number: b,
          compatibility_score: score,
          match_type: "ุชูุฃู ุฑูุญ",
          reason,
          match_id,
          round
        })

        alreadyMatched.add(key)
        roundUsed.add(a)
        roundUsed.add(b)
        matchCount[a]++
        matchCount[b]++
      }
    }

    // 7. Fallback for participants with < 4 matches
    const fullSet = new Set(numbers)
    const existing = new Set()
    for (const m of matches) {
      existing.add(m.participant_a_number)
      existing.add(m.participant_b_number)
    }

    for (const n of fullSet) {
      const count = matchCount[n] || 0
      if (count < 4) {
        matches.push({
          participant_a_number: 0,
          participant_b_number: n,
          compatibility_score: 0,
          match_type: "ูุญุงูุฏ",
          reason: "ูู ูุฌุฏ ูู ูค ูุจุงุฑูุงุช ูุชูุงููุฉ.",
          match_id,
          round: count + 1
        })
      }
    }

    // 8. Insert into DB
    const { error: insertError } = await supabase
      .from("match_results")
      .insert(matches)

    if (insertError) throw insertError

    return res.status(200).json({
      message: "โ Matching complete with 4 rounds per participant",
      count: matches.length,
      results: matches
    })

  } catch (err) {
    console.error("๐ฅ Matching error:", err)
    return res.status(500).json({ error: err.message || "Unexpected error" })
  }
}
